/*
* @name bison.yy
* @description A Simple Tools of Expression Analysis
* @date 03/26/2020 
* @author Lrq
*/

%language "C++"
%defines
%locations
%skeleton "lalr1.cc"

%code{
	#include <iostream>
	#include <unistd.h>
}

%code requires{
	#include "ast.h"
	#include "visitor.h"
}
%union{
	Expression* e;
	double d;
}

%parse-param {Expression** root }

/* declearation */
%token EOL
%token <d> NUMBER
%token ADD SUB MUL DIV OP CP
%type <e> exp factor term

%{
	extern int yylex(yy::parser::semantic_type *yylval, yy::parser::location_type *yylloc);
%}
%%
	calclist:
	| calclist exp EOL{ printf("Recognized!\n"); *root = $2;}
	| calclist EOL { printf("> "); }
	;

	exp: factor {$$ = $1;}
	| exp ADD factor { $$ = new BinOp("Plus", $1, $3); }
	| exp SUB factor { $$ = new BinOp("Sub", $1, $3); }	
	;

	factor: term {$$ = $1;}
	| factor MUL term { $$ = new BinOp("Mul", $1, $3);} 
	| factor DIV term { if (((Num*)$3)->val == 0){
							error(@3, "Zero Divide!\n");
							YYABORT;								
					    }
					  $$ = new BinOp("Div", $1, $3);}
	;

	term: NUMBER  { $$ = new Num("Num", $1); }
	| OP exp CP { $$ = $2; }
	;
%%

namespace yy{
	void
	parser::error(location const &loc, const std::string &s){
			std::cerr << "error at " << loc << ": " << s << std::endl;
	}
}
